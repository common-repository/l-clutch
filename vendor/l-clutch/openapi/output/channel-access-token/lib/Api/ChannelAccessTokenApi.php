<?php
/**
 * ChannelAccessTokenApi
 * PHP version 7.4
 *
 * @category Class
 * @package  LClutch\LineApi\ChannelAccessToken
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Channel Access Token API
 *
 * This document describes Channel Access Token API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace LClutch\LineApi\ChannelAccessToken\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use LClutch\LineApi\ChannelAccessToken\ApiException;
use LClutch\LineApi\ChannelAccessToken\Configuration;
use LClutch\LineApi\ChannelAccessToken\HeaderSelector;
use LClutch\LineApi\ChannelAccessToken\ObjectSerializer;

/**
 * ChannelAccessTokenApi Class Doc Comment
 *
 * @category Class
 * @package  LClutch\LineApi\ChannelAccessToken
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ChannelAccessTokenApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getsAllValidChannelAccessTokenKeyIds' => [
            'application/json',
        ],
        'issueChannelToken' => [
            'application/x-www-form-urlencoded',
        ],
        'issueChannelTokenByJWT' => [
            'application/x-www-form-urlencoded',
        ],
        'issueStatelessChannelToken' => [
            'application/x-www-form-urlencoded',
        ],
        'revokeChannelToken' => [
            'application/x-www-form-urlencoded',
        ],
        'revokeChannelTokenByJWT' => [
            'application/x-www-form-urlencoded',
        ],
        'verifyChannelToken' => [
            'application/x-www-form-urlencoded',
        ],
        'verifyChannelTokenByJWT' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getsAllValidChannelAccessTokenKeyIds
     *
     * @param  string $client_assertion_type &#x60;urn:ietf:params:oauth:client-assertion-type:jwt-bearer&#x60; (required)
     * @param  string $client_assertion A JSON Web Token (JWT) (opens new window)the client needs to create and sign with the private key. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getsAllValidChannelAccessTokenKeyIds'] to see the possible values for this operation
     *
     * @throws \LClutch\LineApi\ChannelAccessToken\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LClutch\LineApi\ChannelAccessToken\Model\ChannelAccessTokenKeyIdsResponse
     */
    public function getsAllValidChannelAccessTokenKeyIds($client_assertion_type, $client_assertion, string $contentType = self::contentTypes['getsAllValidChannelAccessTokenKeyIds'][0])
    {
        list($response) = $this->getsAllValidChannelAccessTokenKeyIdsWithHttpInfo($client_assertion_type, $client_assertion, $contentType);
        return $response;
    }

    /**
     * Operation getsAllValidChannelAccessTokenKeyIdsWithHttpInfo
     *
     * @param  string $client_assertion_type &#x60;urn:ietf:params:oauth:client-assertion-type:jwt-bearer&#x60; (required)
     * @param  string $client_assertion A JSON Web Token (JWT) (opens new window)the client needs to create and sign with the private key. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getsAllValidChannelAccessTokenKeyIds'] to see the possible values for this operation
     *
     * @throws \LClutch\LineApi\ChannelAccessToken\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LClutch\LineApi\ChannelAccessToken\Model\ChannelAccessTokenKeyIdsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getsAllValidChannelAccessTokenKeyIdsWithHttpInfo($client_assertion_type, $client_assertion, string $contentType = self::contentTypes['getsAllValidChannelAccessTokenKeyIds'][0])
    {
        $request = $this->getsAllValidChannelAccessTokenKeyIdsRequest($client_assertion_type, $client_assertion, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LClutch\LineApi\ChannelAccessToken\Model\ChannelAccessTokenKeyIdsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LClutch\LineApi\ChannelAccessToken\Model\ChannelAccessTokenKeyIdsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LClutch\LineApi\ChannelAccessToken\Model\ChannelAccessTokenKeyIdsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LClutch\LineApi\ChannelAccessToken\Model\ChannelAccessTokenKeyIdsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LClutch\LineApi\ChannelAccessToken\Model\ChannelAccessTokenKeyIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getsAllValidChannelAccessTokenKeyIdsAsync
     *
     * @param  string $client_assertion_type &#x60;urn:ietf:params:oauth:client-assertion-type:jwt-bearer&#x60; (required)
     * @param  string $client_assertion A JSON Web Token (JWT) (opens new window)the client needs to create and sign with the private key. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getsAllValidChannelAccessTokenKeyIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getsAllValidChannelAccessTokenKeyIdsAsync($client_assertion_type, $client_assertion, string $contentType = self::contentTypes['getsAllValidChannelAccessTokenKeyIds'][0])
    {
        return $this->getsAllValidChannelAccessTokenKeyIdsAsyncWithHttpInfo($client_assertion_type, $client_assertion, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getsAllValidChannelAccessTokenKeyIdsAsyncWithHttpInfo
     *
     * @param  string $client_assertion_type &#x60;urn:ietf:params:oauth:client-assertion-type:jwt-bearer&#x60; (required)
     * @param  string $client_assertion A JSON Web Token (JWT) (opens new window)the client needs to create and sign with the private key. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getsAllValidChannelAccessTokenKeyIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getsAllValidChannelAccessTokenKeyIdsAsyncWithHttpInfo($client_assertion_type, $client_assertion, string $contentType = self::contentTypes['getsAllValidChannelAccessTokenKeyIds'][0])
    {
        $returnType = '\LClutch\LineApi\ChannelAccessToken\Model\ChannelAccessTokenKeyIdsResponse';
        $request = $this->getsAllValidChannelAccessTokenKeyIdsRequest($client_assertion_type, $client_assertion, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getsAllValidChannelAccessTokenKeyIds'
     *
     * @param  string $client_assertion_type &#x60;urn:ietf:params:oauth:client-assertion-type:jwt-bearer&#x60; (required)
     * @param  string $client_assertion A JSON Web Token (JWT) (opens new window)the client needs to create and sign with the private key. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getsAllValidChannelAccessTokenKeyIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getsAllValidChannelAccessTokenKeyIdsRequest($client_assertion_type, $client_assertion, string $contentType = self::contentTypes['getsAllValidChannelAccessTokenKeyIds'][0])
    {

        // verify the required parameter 'client_assertion_type' is set
        if ($client_assertion_type === null || (is_array($client_assertion_type) && count($client_assertion_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_assertion_type when calling getsAllValidChannelAccessTokenKeyIds'
            );
        }

        // verify the required parameter 'client_assertion' is set
        if ($client_assertion === null || (is_array($client_assertion) && count($client_assertion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_assertion when calling getsAllValidChannelAccessTokenKeyIds'
            );
        }


        $resourcePath = '/oauth2/v2.1/tokens/kid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_assertion_type,
            'client_assertion_type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_assertion,
            'client_assertion', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation issueChannelToken
     *
     * @param  string $grant_type &#x60;client_credentials&#x60; (optional)
     * @param  string $client_id Channel ID. (optional)
     * @param  string $client_secret Channel secret. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['issueChannelToken'] to see the possible values for this operation
     *
     * @throws \LClutch\LineApi\ChannelAccessToken\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LClutch\LineApi\ChannelAccessToken\Model\IssueShortLivedChannelAccessTokenResponse|\LClutch\LineApi\ChannelAccessToken\Model\ErrorResponse
     */
    public function issueChannelToken($grant_type = null, $client_id = null, $client_secret = null, string $contentType = self::contentTypes['issueChannelToken'][0])
    {
        list($response) = $this->issueChannelTokenWithHttpInfo($grant_type, $client_id, $client_secret, $contentType);
        return $response;
    }

    /**
     * Operation issueChannelTokenWithHttpInfo
     *
     * @param  string $grant_type &#x60;client_credentials&#x60; (optional)
     * @param  string $client_id Channel ID. (optional)
     * @param  string $client_secret Channel secret. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['issueChannelToken'] to see the possible values for this operation
     *
     * @throws \LClutch\LineApi\ChannelAccessToken\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LClutch\LineApi\ChannelAccessToken\Model\IssueShortLivedChannelAccessTokenResponse|\LClutch\LineApi\ChannelAccessToken\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function issueChannelTokenWithHttpInfo($grant_type = null, $client_id = null, $client_secret = null, string $contentType = self::contentTypes['issueChannelToken'][0])
    {
        $request = $this->issueChannelTokenRequest($grant_type, $client_id, $client_secret, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LClutch\LineApi\ChannelAccessToken\Model\IssueShortLivedChannelAccessTokenResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LClutch\LineApi\ChannelAccessToken\Model\IssueShortLivedChannelAccessTokenResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LClutch\LineApi\ChannelAccessToken\Model\IssueShortLivedChannelAccessTokenResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\LClutch\LineApi\ChannelAccessToken\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LClutch\LineApi\ChannelAccessToken\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LClutch\LineApi\ChannelAccessToken\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LClutch\LineApi\ChannelAccessToken\Model\IssueShortLivedChannelAccessTokenResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LClutch\LineApi\ChannelAccessToken\Model\IssueShortLivedChannelAccessTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LClutch\LineApi\ChannelAccessToken\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation issueChannelTokenAsync
     *
     * @param  string $grant_type &#x60;client_credentials&#x60; (optional)
     * @param  string $client_id Channel ID. (optional)
     * @param  string $client_secret Channel secret. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['issueChannelToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function issueChannelTokenAsync($grant_type = null, $client_id = null, $client_secret = null, string $contentType = self::contentTypes['issueChannelToken'][0])
    {
        return $this->issueChannelTokenAsyncWithHttpInfo($grant_type, $client_id, $client_secret, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation issueChannelTokenAsyncWithHttpInfo
     *
     * @param  string $grant_type &#x60;client_credentials&#x60; (optional)
     * @param  string $client_id Channel ID. (optional)
     * @param  string $client_secret Channel secret. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['issueChannelToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function issueChannelTokenAsyncWithHttpInfo($grant_type = null, $client_id = null, $client_secret = null, string $contentType = self::contentTypes['issueChannelToken'][0])
    {
        $returnType = '\LClutch\LineApi\ChannelAccessToken\Model\IssueShortLivedChannelAccessTokenResponse';
        $request = $this->issueChannelTokenRequest($grant_type, $client_id, $client_secret, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'issueChannelToken'
     *
     * @param  string $grant_type &#x60;client_credentials&#x60; (optional)
     * @param  string $client_id Channel ID. (optional)
     * @param  string $client_secret Channel secret. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['issueChannelToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function issueChannelTokenRequest($grant_type = null, $client_id = null, $client_secret = null, string $contentType = self::contentTypes['issueChannelToken'][0])
    {





        $resourcePath = '/v2/oauth/accessToken';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($grant_type !== null) {
            $formParams['grant_type'] = ObjectSerializer::toFormValue($grant_type);
        }
        // form params
        if ($client_id !== null) {
            $formParams['client_id'] = ObjectSerializer::toFormValue($client_id);
        }
        // form params
        if ($client_secret !== null) {
            $formParams['client_secret'] = ObjectSerializer::toFormValue($client_secret);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation issueChannelTokenByJWT
     *
     * @param  string $grant_type client_credentials (optional)
     * @param  string $client_assertion_type urn:ietf:params:oauth:client-assertion-type:jwt-bearer (optional)
     * @param  string $client_assertion A JSON Web Token the client needs to create and sign with the private key of the Assertion Signing Key. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['issueChannelTokenByJWT'] to see the possible values for this operation
     *
     * @throws \LClutch\LineApi\ChannelAccessToken\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LClutch\LineApi\ChannelAccessToken\Model\IssueChannelAccessTokenResponse
     */
    public function issueChannelTokenByJWT($grant_type = null, $client_assertion_type = null, $client_assertion = null, string $contentType = self::contentTypes['issueChannelTokenByJWT'][0])
    {
        list($response) = $this->issueChannelTokenByJWTWithHttpInfo($grant_type, $client_assertion_type, $client_assertion, $contentType);
        return $response;
    }

    /**
     * Operation issueChannelTokenByJWTWithHttpInfo
     *
     * @param  string $grant_type client_credentials (optional)
     * @param  string $client_assertion_type urn:ietf:params:oauth:client-assertion-type:jwt-bearer (optional)
     * @param  string $client_assertion A JSON Web Token the client needs to create and sign with the private key of the Assertion Signing Key. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['issueChannelTokenByJWT'] to see the possible values for this operation
     *
     * @throws \LClutch\LineApi\ChannelAccessToken\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LClutch\LineApi\ChannelAccessToken\Model\IssueChannelAccessTokenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function issueChannelTokenByJWTWithHttpInfo($grant_type = null, $client_assertion_type = null, $client_assertion = null, string $contentType = self::contentTypes['issueChannelTokenByJWT'][0])
    {
        $request = $this->issueChannelTokenByJWTRequest($grant_type, $client_assertion_type, $client_assertion, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LClutch\LineApi\ChannelAccessToken\Model\IssueChannelAccessTokenResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LClutch\LineApi\ChannelAccessToken\Model\IssueChannelAccessTokenResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LClutch\LineApi\ChannelAccessToken\Model\IssueChannelAccessTokenResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LClutch\LineApi\ChannelAccessToken\Model\IssueChannelAccessTokenResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LClutch\LineApi\ChannelAccessToken\Model\IssueChannelAccessTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation issueChannelTokenByJWTAsync
     *
     * @param  string $grant_type client_credentials (optional)
     * @param  string $client_assertion_type urn:ietf:params:oauth:client-assertion-type:jwt-bearer (optional)
     * @param  string $client_assertion A JSON Web Token the client needs to create and sign with the private key of the Assertion Signing Key. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['issueChannelTokenByJWT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function issueChannelTokenByJWTAsync($grant_type = null, $client_assertion_type = null, $client_assertion = null, string $contentType = self::contentTypes['issueChannelTokenByJWT'][0])
    {
        return $this->issueChannelTokenByJWTAsyncWithHttpInfo($grant_type, $client_assertion_type, $client_assertion, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation issueChannelTokenByJWTAsyncWithHttpInfo
     *
     * @param  string $grant_type client_credentials (optional)
     * @param  string $client_assertion_type urn:ietf:params:oauth:client-assertion-type:jwt-bearer (optional)
     * @param  string $client_assertion A JSON Web Token the client needs to create and sign with the private key of the Assertion Signing Key. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['issueChannelTokenByJWT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function issueChannelTokenByJWTAsyncWithHttpInfo($grant_type = null, $client_assertion_type = null, $client_assertion = null, string $contentType = self::contentTypes['issueChannelTokenByJWT'][0])
    {
        $returnType = '\LClutch\LineApi\ChannelAccessToken\Model\IssueChannelAccessTokenResponse';
        $request = $this->issueChannelTokenByJWTRequest($grant_type, $client_assertion_type, $client_assertion, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'issueChannelTokenByJWT'
     *
     * @param  string $grant_type client_credentials (optional)
     * @param  string $client_assertion_type urn:ietf:params:oauth:client-assertion-type:jwt-bearer (optional)
     * @param  string $client_assertion A JSON Web Token the client needs to create and sign with the private key of the Assertion Signing Key. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['issueChannelTokenByJWT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function issueChannelTokenByJWTRequest($grant_type = null, $client_assertion_type = null, $client_assertion = null, string $contentType = self::contentTypes['issueChannelTokenByJWT'][0])
    {





        $resourcePath = '/oauth2/v2.1/token';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($grant_type !== null) {
            $formParams['grant_type'] = ObjectSerializer::toFormValue($grant_type);
        }
        // form params
        if ($client_assertion_type !== null) {
            $formParams['client_assertion_type'] = ObjectSerializer::toFormValue($client_assertion_type);
        }
        // form params
        if ($client_assertion !== null) {
            $formParams['client_assertion'] = ObjectSerializer::toFormValue($client_assertion);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation issueStatelessChannelToken
     *
     * @param  string $grant_type &#x60;client_credentials&#x60; (required)
     * @param  string $client_assertion_type URL-encoded value of &#x60;urn:ietf:params:oauth:client-assertion-type:jwt-bearer&#x60; (required)
     * @param  string $client_assertion A JSON Web Token the client needs to create and sign with the private key of the Assertion Signing Key. (required)
     * @param  string $client_id Channel ID. (required)
     * @param  string $client_secret Channel secret. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['issueStatelessChannelToken'] to see the possible values for this operation
     *
     * @throws \LClutch\LineApi\ChannelAccessToken\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LClutch\LineApi\ChannelAccessToken\Model\IssueStatelessChannelAccessTokenResponse
     */
    public function issueStatelessChannelToken($grant_type, $client_assertion_type, $client_assertion, $client_id, $client_secret, string $contentType = self::contentTypes['issueStatelessChannelToken'][0])
    {
        list($response) = $this->issueStatelessChannelTokenWithHttpInfo($grant_type, $client_assertion_type, $client_assertion, $client_id, $client_secret, $contentType);
        return $response;
    }

    /**
     * Operation issueStatelessChannelTokenWithHttpInfo
     *
     * @param  string $grant_type &#x60;client_credentials&#x60; (required)
     * @param  string $client_assertion_type URL-encoded value of &#x60;urn:ietf:params:oauth:client-assertion-type:jwt-bearer&#x60; (required)
     * @param  string $client_assertion A JSON Web Token the client needs to create and sign with the private key of the Assertion Signing Key. (required)
     * @param  string $client_id Channel ID. (required)
     * @param  string $client_secret Channel secret. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['issueStatelessChannelToken'] to see the possible values for this operation
     *
     * @throws \LClutch\LineApi\ChannelAccessToken\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LClutch\LineApi\ChannelAccessToken\Model\IssueStatelessChannelAccessTokenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function issueStatelessChannelTokenWithHttpInfo($grant_type, $client_assertion_type, $client_assertion, $client_id, $client_secret, string $contentType = self::contentTypes['issueStatelessChannelToken'][0])
    {
        $request = $this->issueStatelessChannelTokenRequest($grant_type, $client_assertion_type, $client_assertion, $client_id, $client_secret, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LClutch\LineApi\ChannelAccessToken\Model\IssueStatelessChannelAccessTokenResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LClutch\LineApi\ChannelAccessToken\Model\IssueStatelessChannelAccessTokenResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LClutch\LineApi\ChannelAccessToken\Model\IssueStatelessChannelAccessTokenResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LClutch\LineApi\ChannelAccessToken\Model\IssueStatelessChannelAccessTokenResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LClutch\LineApi\ChannelAccessToken\Model\IssueStatelessChannelAccessTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation issueStatelessChannelTokenAsync
     *
     * @param  string $grant_type &#x60;client_credentials&#x60; (required)
     * @param  string $client_assertion_type URL-encoded value of &#x60;urn:ietf:params:oauth:client-assertion-type:jwt-bearer&#x60; (required)
     * @param  string $client_assertion A JSON Web Token the client needs to create and sign with the private key of the Assertion Signing Key. (required)
     * @param  string $client_id Channel ID. (required)
     * @param  string $client_secret Channel secret. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['issueStatelessChannelToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function issueStatelessChannelTokenAsync($grant_type, $client_assertion_type, $client_assertion, $client_id, $client_secret, string $contentType = self::contentTypes['issueStatelessChannelToken'][0])
    {
        return $this->issueStatelessChannelTokenAsyncWithHttpInfo($grant_type, $client_assertion_type, $client_assertion, $client_id, $client_secret, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation issueStatelessChannelTokenAsyncWithHttpInfo
     *
     * @param  string $grant_type &#x60;client_credentials&#x60; (required)
     * @param  string $client_assertion_type URL-encoded value of &#x60;urn:ietf:params:oauth:client-assertion-type:jwt-bearer&#x60; (required)
     * @param  string $client_assertion A JSON Web Token the client needs to create and sign with the private key of the Assertion Signing Key. (required)
     * @param  string $client_id Channel ID. (required)
     * @param  string $client_secret Channel secret. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['issueStatelessChannelToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function issueStatelessChannelTokenAsyncWithHttpInfo($grant_type, $client_assertion_type, $client_assertion, $client_id, $client_secret, string $contentType = self::contentTypes['issueStatelessChannelToken'][0])
    {
        $returnType = '\LClutch\LineApi\ChannelAccessToken\Model\IssueStatelessChannelAccessTokenResponse';
        $request = $this->issueStatelessChannelTokenRequest($grant_type, $client_assertion_type, $client_assertion, $client_id, $client_secret, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'issueStatelessChannelToken'
     *
     * @param  string $grant_type &#x60;client_credentials&#x60; (required)
     * @param  string $client_assertion_type URL-encoded value of &#x60;urn:ietf:params:oauth:client-assertion-type:jwt-bearer&#x60; (required)
     * @param  string $client_assertion A JSON Web Token the client needs to create and sign with the private key of the Assertion Signing Key. (required)
     * @param  string $client_id Channel ID. (required)
     * @param  string $client_secret Channel secret. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['issueStatelessChannelToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function issueStatelessChannelTokenRequest($grant_type, $client_assertion_type, $client_assertion, $client_id, $client_secret, string $contentType = self::contentTypes['issueStatelessChannelToken'][0])
    {

        // verify the required parameter 'grant_type' is set
        if ($grant_type === null || (is_array($grant_type) && count($grant_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grant_type when calling issueStatelessChannelToken'
            );
        }

        // verify the required parameter 'client_assertion_type' is set
        if ($client_assertion_type === null || (is_array($client_assertion_type) && count($client_assertion_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_assertion_type when calling issueStatelessChannelToken'
            );
        }

        // verify the required parameter 'client_assertion' is set
        if ($client_assertion === null || (is_array($client_assertion) && count($client_assertion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_assertion when calling issueStatelessChannelToken'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling issueStatelessChannelToken'
            );
        }

        // verify the required parameter 'client_secret' is set
        if ($client_secret === null || (is_array($client_secret) && count($client_secret) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_secret when calling issueStatelessChannelToken'
            );
        }


        $resourcePath = '/oauth2/v3/token';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($grant_type !== null) {
            $formParams['grant_type'] = ObjectSerializer::toFormValue($grant_type);
        }
        // form params
        if ($client_assertion_type !== null) {
            $formParams['client_assertion_type'] = ObjectSerializer::toFormValue($client_assertion_type);
        }
        // form params
        if ($client_assertion !== null) {
            $formParams['client_assertion'] = ObjectSerializer::toFormValue($client_assertion);
        }
        // form params
        if ($client_id !== null) {
            $formParams['client_id'] = ObjectSerializer::toFormValue($client_id);
        }
        // form params
        if ($client_secret !== null) {
            $formParams['client_secret'] = ObjectSerializer::toFormValue($client_secret);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation revokeChannelToken
     *
     * @param  string $access_token Channel access token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeChannelToken'] to see the possible values for this operation
     *
     * @throws \LClutch\LineApi\ChannelAccessToken\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function revokeChannelToken($access_token = null, string $contentType = self::contentTypes['revokeChannelToken'][0])
    {
        $this->revokeChannelTokenWithHttpInfo($access_token, $contentType);
    }

    /**
     * Operation revokeChannelTokenWithHttpInfo
     *
     * @param  string $access_token Channel access token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeChannelToken'] to see the possible values for this operation
     *
     * @throws \LClutch\LineApi\ChannelAccessToken\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function revokeChannelTokenWithHttpInfo($access_token = null, string $contentType = self::contentTypes['revokeChannelToken'][0])
    {
        $request = $this->revokeChannelTokenRequest($access_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation revokeChannelTokenAsync
     *
     * @param  string $access_token Channel access token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeChannelToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function revokeChannelTokenAsync($access_token = null, string $contentType = self::contentTypes['revokeChannelToken'][0])
    {
        return $this->revokeChannelTokenAsyncWithHttpInfo($access_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation revokeChannelTokenAsyncWithHttpInfo
     *
     * @param  string $access_token Channel access token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeChannelToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function revokeChannelTokenAsyncWithHttpInfo($access_token = null, string $contentType = self::contentTypes['revokeChannelToken'][0])
    {
        $returnType = '';
        $request = $this->revokeChannelTokenRequest($access_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'revokeChannelToken'
     *
     * @param  string $access_token Channel access token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeChannelToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function revokeChannelTokenRequest($access_token = null, string $contentType = self::contentTypes['revokeChannelToken'][0])
    {



        $resourcePath = '/v2/oauth/revoke';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($access_token !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($access_token);
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation revokeChannelTokenByJWT
     *
     * @param  string $client_id Channel ID (optional)
     * @param  string $client_secret Channel Secret (optional)
     * @param  string $access_token Channel access token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeChannelTokenByJWT'] to see the possible values for this operation
     *
     * @throws \LClutch\LineApi\ChannelAccessToken\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function revokeChannelTokenByJWT($client_id = null, $client_secret = null, $access_token = null, string $contentType = self::contentTypes['revokeChannelTokenByJWT'][0])
    {
        $this->revokeChannelTokenByJWTWithHttpInfo($client_id, $client_secret, $access_token, $contentType);
    }

    /**
     * Operation revokeChannelTokenByJWTWithHttpInfo
     *
     * @param  string $client_id Channel ID (optional)
     * @param  string $client_secret Channel Secret (optional)
     * @param  string $access_token Channel access token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeChannelTokenByJWT'] to see the possible values for this operation
     *
     * @throws \LClutch\LineApi\ChannelAccessToken\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function revokeChannelTokenByJWTWithHttpInfo($client_id = null, $client_secret = null, $access_token = null, string $contentType = self::contentTypes['revokeChannelTokenByJWT'][0])
    {
        $request = $this->revokeChannelTokenByJWTRequest($client_id, $client_secret, $access_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation revokeChannelTokenByJWTAsync
     *
     * @param  string $client_id Channel ID (optional)
     * @param  string $client_secret Channel Secret (optional)
     * @param  string $access_token Channel access token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeChannelTokenByJWT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function revokeChannelTokenByJWTAsync($client_id = null, $client_secret = null, $access_token = null, string $contentType = self::contentTypes['revokeChannelTokenByJWT'][0])
    {
        return $this->revokeChannelTokenByJWTAsyncWithHttpInfo($client_id, $client_secret, $access_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation revokeChannelTokenByJWTAsyncWithHttpInfo
     *
     * @param  string $client_id Channel ID (optional)
     * @param  string $client_secret Channel Secret (optional)
     * @param  string $access_token Channel access token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeChannelTokenByJWT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function revokeChannelTokenByJWTAsyncWithHttpInfo($client_id = null, $client_secret = null, $access_token = null, string $contentType = self::contentTypes['revokeChannelTokenByJWT'][0])
    {
        $returnType = '';
        $request = $this->revokeChannelTokenByJWTRequest($client_id, $client_secret, $access_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'revokeChannelTokenByJWT'
     *
     * @param  string $client_id Channel ID (optional)
     * @param  string $client_secret Channel Secret (optional)
     * @param  string $access_token Channel access token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeChannelTokenByJWT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function revokeChannelTokenByJWTRequest($client_id = null, $client_secret = null, $access_token = null, string $contentType = self::contentTypes['revokeChannelTokenByJWT'][0])
    {





        $resourcePath = '/oauth2/v2.1/revoke';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($client_id !== null) {
            $formParams['client_id'] = ObjectSerializer::toFormValue($client_id);
        }
        // form params
        if ($client_secret !== null) {
            $formParams['client_secret'] = ObjectSerializer::toFormValue($client_secret);
        }
        // form params
        if ($access_token !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($access_token);
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation verifyChannelToken
     *
     * @param  string $access_token A short-lived or long-lived channel access token. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['verifyChannelToken'] to see the possible values for this operation
     *
     * @throws \LClutch\LineApi\ChannelAccessToken\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LClutch\LineApi\ChannelAccessToken\Model\VerifyChannelAccessTokenResponse
     */
    public function verifyChannelToken($access_token = null, string $contentType = self::contentTypes['verifyChannelToken'][0])
    {
        list($response) = $this->verifyChannelTokenWithHttpInfo($access_token, $contentType);
        return $response;
    }

    /**
     * Operation verifyChannelTokenWithHttpInfo
     *
     * @param  string $access_token A short-lived or long-lived channel access token. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['verifyChannelToken'] to see the possible values for this operation
     *
     * @throws \LClutch\LineApi\ChannelAccessToken\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LClutch\LineApi\ChannelAccessToken\Model\VerifyChannelAccessTokenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function verifyChannelTokenWithHttpInfo($access_token = null, string $contentType = self::contentTypes['verifyChannelToken'][0])
    {
        $request = $this->verifyChannelTokenRequest($access_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LClutch\LineApi\ChannelAccessToken\Model\VerifyChannelAccessTokenResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LClutch\LineApi\ChannelAccessToken\Model\VerifyChannelAccessTokenResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LClutch\LineApi\ChannelAccessToken\Model\VerifyChannelAccessTokenResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LClutch\LineApi\ChannelAccessToken\Model\VerifyChannelAccessTokenResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LClutch\LineApi\ChannelAccessToken\Model\VerifyChannelAccessTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation verifyChannelTokenAsync
     *
     * @param  string $access_token A short-lived or long-lived channel access token. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['verifyChannelToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function verifyChannelTokenAsync($access_token = null, string $contentType = self::contentTypes['verifyChannelToken'][0])
    {
        return $this->verifyChannelTokenAsyncWithHttpInfo($access_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation verifyChannelTokenAsyncWithHttpInfo
     *
     * @param  string $access_token A short-lived or long-lived channel access token. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['verifyChannelToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function verifyChannelTokenAsyncWithHttpInfo($access_token = null, string $contentType = self::contentTypes['verifyChannelToken'][0])
    {
        $returnType = '\LClutch\LineApi\ChannelAccessToken\Model\VerifyChannelAccessTokenResponse';
        $request = $this->verifyChannelTokenRequest($access_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'verifyChannelToken'
     *
     * @param  string $access_token A short-lived or long-lived channel access token. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['verifyChannelToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function verifyChannelTokenRequest($access_token = null, string $contentType = self::contentTypes['verifyChannelToken'][0])
    {



        $resourcePath = '/v2/oauth/verify';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($access_token !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($access_token);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation verifyChannelTokenByJWT
     *
     * @param  string $access_token Channel access token with a user-specified expiration (Channel Access Token v2.1). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['verifyChannelTokenByJWT'] to see the possible values for this operation
     *
     * @throws \LClutch\LineApi\ChannelAccessToken\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LClutch\LineApi\ChannelAccessToken\Model\VerifyChannelAccessTokenResponse
     */
    public function verifyChannelTokenByJWT($access_token, string $contentType = self::contentTypes['verifyChannelTokenByJWT'][0])
    {
        list($response) = $this->verifyChannelTokenByJWTWithHttpInfo($access_token, $contentType);
        return $response;
    }

    /**
     * Operation verifyChannelTokenByJWTWithHttpInfo
     *
     * @param  string $access_token Channel access token with a user-specified expiration (Channel Access Token v2.1). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['verifyChannelTokenByJWT'] to see the possible values for this operation
     *
     * @throws \LClutch\LineApi\ChannelAccessToken\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LClutch\LineApi\ChannelAccessToken\Model\VerifyChannelAccessTokenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function verifyChannelTokenByJWTWithHttpInfo($access_token, string $contentType = self::contentTypes['verifyChannelTokenByJWT'][0])
    {
        $request = $this->verifyChannelTokenByJWTRequest($access_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LClutch\LineApi\ChannelAccessToken\Model\VerifyChannelAccessTokenResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LClutch\LineApi\ChannelAccessToken\Model\VerifyChannelAccessTokenResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LClutch\LineApi\ChannelAccessToken\Model\VerifyChannelAccessTokenResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LClutch\LineApi\ChannelAccessToken\Model\VerifyChannelAccessTokenResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LClutch\LineApi\ChannelAccessToken\Model\VerifyChannelAccessTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation verifyChannelTokenByJWTAsync
     *
     * @param  string $access_token Channel access token with a user-specified expiration (Channel Access Token v2.1). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['verifyChannelTokenByJWT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function verifyChannelTokenByJWTAsync($access_token, string $contentType = self::contentTypes['verifyChannelTokenByJWT'][0])
    {
        return $this->verifyChannelTokenByJWTAsyncWithHttpInfo($access_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation verifyChannelTokenByJWTAsyncWithHttpInfo
     *
     * @param  string $access_token Channel access token with a user-specified expiration (Channel Access Token v2.1). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['verifyChannelTokenByJWT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function verifyChannelTokenByJWTAsyncWithHttpInfo($access_token, string $contentType = self::contentTypes['verifyChannelTokenByJWT'][0])
    {
        $returnType = '\LClutch\LineApi\ChannelAccessToken\Model\VerifyChannelAccessTokenResponse';
        $request = $this->verifyChannelTokenByJWTRequest($access_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'verifyChannelTokenByJWT'
     *
     * @param  string $access_token Channel access token with a user-specified expiration (Channel Access Token v2.1). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['verifyChannelTokenByJWT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function verifyChannelTokenByJWTRequest($access_token, string $contentType = self::contentTypes['verifyChannelTokenByJWT'][0])
    {

        // verify the required parameter 'access_token' is set
        if ($access_token === null || (is_array($access_token) && count($access_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $access_token when calling verifyChannelTokenByJWT'
            );
        }


        $resourcePath = '/oauth2/v2.1/verify';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $access_token,
            'access_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
