<?php
/**
 * FlexBox
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  LClutch\LineApi\MessagingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace LClutch\LineApi\MessagingApi\Model;
use \LClutch\LineApi\MessagingApi\ObjectSerializer;

/**
 * FlexBox Class Doc Comment
 *
 * @category Class
 * @package  LClutch\LineApi\MessagingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FlexBox extends FlexComponent
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FlexBox';

    /**
      * Array of subclass mappings. Used for (de)serialization
      */
    public static $subclasses = [];

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'layout' => 'string',
        'flex' => 'int',
        'contents' => '\LClutch\LineApi\MessagingApi\Model\FlexComponent[]',
        'spacing' => 'string',
        'margin' => 'string',
        'position' => 'string',
        'offset_top' => 'string',
        'offset_bottom' => 'string',
        'offset_start' => 'string',
        'offset_end' => 'string',
        'background_color' => 'string',
        'border_color' => 'string',
        'border_width' => 'string',
        'corner_radius' => 'string',
        'width' => 'string',
        'max_width' => 'string',
        'height' => 'string',
        'max_height' => 'string',
        'padding_all' => 'string',
        'padding_top' => 'string',
        'padding_bottom' => 'string',
        'padding_start' => 'string',
        'padding_end' => 'string',
        'action' => '\LClutch\LineApi\MessagingApi\Model\Action',
        'justify_content' => 'string',
        'align_items' => 'string',
        'background' => '\LClutch\LineApi\MessagingApi\Model\FlexBoxBackground'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'layout' => null,
        'flex' => 'int32',
        'contents' => null,
        'spacing' => null,
        'margin' => null,
        'position' => null,
        'offset_top' => null,
        'offset_bottom' => null,
        'offset_start' => null,
        'offset_end' => null,
        'background_color' => null,
        'border_color' => null,
        'border_width' => null,
        'corner_radius' => null,
        'width' => null,
        'max_width' => null,
        'height' => null,
        'max_height' => null,
        'padding_all' => null,
        'padding_top' => null,
        'padding_bottom' => null,
        'padding_start' => null,
        'padding_end' => null,
        'action' => null,
        'justify_content' => null,
        'align_items' => null,
        'background' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'layout' => false,
		'flex' => false,
		'contents' => false,
		'spacing' => false,
		'margin' => false,
		'position' => false,
		'offset_top' => false,
		'offset_bottom' => false,
		'offset_start' => false,
		'offset_end' => false,
		'background_color' => false,
		'border_color' => false,
		'border_width' => false,
		'corner_radius' => false,
		'width' => false,
		'max_width' => false,
		'height' => false,
		'max_height' => false,
		'padding_all' => false,
		'padding_top' => false,
		'padding_bottom' => false,
		'padding_start' => false,
		'padding_end' => false,
		'action' => false,
		'justify_content' => false,
		'align_items' => false,
		'background' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes + parent::openAPITypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats + parent::openAPIFormats();
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables + parent::openAPINullables();
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'layout' => 'layout',
        'flex' => 'flex',
        'contents' => 'contents',
        'spacing' => 'spacing',
        'margin' => 'margin',
        'position' => 'position',
        'offset_top' => 'offsetTop',
        'offset_bottom' => 'offsetBottom',
        'offset_start' => 'offsetStart',
        'offset_end' => 'offsetEnd',
        'background_color' => 'backgroundColor',
        'border_color' => 'borderColor',
        'border_width' => 'borderWidth',
        'corner_radius' => 'cornerRadius',
        'width' => 'width',
        'max_width' => 'maxWidth',
        'height' => 'height',
        'max_height' => 'maxHeight',
        'padding_all' => 'paddingAll',
        'padding_top' => 'paddingTop',
        'padding_bottom' => 'paddingBottom',
        'padding_start' => 'paddingStart',
        'padding_end' => 'paddingEnd',
        'action' => 'action',
        'justify_content' => 'justifyContent',
        'align_items' => 'alignItems',
        'background' => 'background'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'layout' => 'setLayout',
        'flex' => 'setFlex',
        'contents' => 'setContents',
        'spacing' => 'setSpacing',
        'margin' => 'setMargin',
        'position' => 'setPosition',
        'offset_top' => 'setOffsetTop',
        'offset_bottom' => 'setOffsetBottom',
        'offset_start' => 'setOffsetStart',
        'offset_end' => 'setOffsetEnd',
        'background_color' => 'setBackgroundColor',
        'border_color' => 'setBorderColor',
        'border_width' => 'setBorderWidth',
        'corner_radius' => 'setCornerRadius',
        'width' => 'setWidth',
        'max_width' => 'setMaxWidth',
        'height' => 'setHeight',
        'max_height' => 'setMaxHeight',
        'padding_all' => 'setPaddingAll',
        'padding_top' => 'setPaddingTop',
        'padding_bottom' => 'setPaddingBottom',
        'padding_start' => 'setPaddingStart',
        'padding_end' => 'setPaddingEnd',
        'action' => 'setAction',
        'justify_content' => 'setJustifyContent',
        'align_items' => 'setAlignItems',
        'background' => 'setBackground'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'layout' => 'getLayout',
        'flex' => 'getFlex',
        'contents' => 'getContents',
        'spacing' => 'getSpacing',
        'margin' => 'getMargin',
        'position' => 'getPosition',
        'offset_top' => 'getOffsetTop',
        'offset_bottom' => 'getOffsetBottom',
        'offset_start' => 'getOffsetStart',
        'offset_end' => 'getOffsetEnd',
        'background_color' => 'getBackgroundColor',
        'border_color' => 'getBorderColor',
        'border_width' => 'getBorderWidth',
        'corner_radius' => 'getCornerRadius',
        'width' => 'getWidth',
        'max_width' => 'getMaxWidth',
        'height' => 'getHeight',
        'max_height' => 'getMaxHeight',
        'padding_all' => 'getPaddingAll',
        'padding_top' => 'getPaddingTop',
        'padding_bottom' => 'getPaddingBottom',
        'padding_start' => 'getPaddingStart',
        'padding_end' => 'getPaddingEnd',
        'action' => 'getAction',
        'justify_content' => 'getJustifyContent',
        'align_items' => 'getAlignItems',
        'background' => 'getBackground'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const LAYOUT_HORIZONTAL = 'horizontal';
    public const LAYOUT_VERTICAL = 'vertical';
    public const LAYOUT_BASELINE = 'baseline';
    public const POSITION_RELATIVE = 'relative';
    public const POSITION_ABSOLUTE = 'absolute';
    public const JUSTIFY_CONTENT_CENTER = 'center';
    public const JUSTIFY_CONTENT_FLEX_START = 'flex-start';
    public const JUSTIFY_CONTENT_FLEX_END = 'flex-end';
    public const JUSTIFY_CONTENT_SPACE_BETWEEN = 'space-between';
    public const JUSTIFY_CONTENT_SPACE_AROUND = 'space-around';
    public const JUSTIFY_CONTENT_SPACE_EVENLY = 'space-evenly';
    public const ALIGN_ITEMS_CENTER = 'center';
    public const ALIGN_ITEMS_FLEX_START = 'flex-start';
    public const ALIGN_ITEMS_FLEX_END = 'flex-end';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLayoutAllowableValues()
    {
        return [
            self::LAYOUT_HORIZONTAL,
            self::LAYOUT_VERTICAL,
            self::LAYOUT_BASELINE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPositionAllowableValues()
    {
        return [
            self::POSITION_RELATIVE,
            self::POSITION_ABSOLUTE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJustifyContentAllowableValues()
    {
        return [
            self::JUSTIFY_CONTENT_CENTER,
            self::JUSTIFY_CONTENT_FLEX_START,
            self::JUSTIFY_CONTENT_FLEX_END,
            self::JUSTIFY_CONTENT_SPACE_BETWEEN,
            self::JUSTIFY_CONTENT_SPACE_AROUND,
            self::JUSTIFY_CONTENT_SPACE_EVENLY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAlignItemsAllowableValues()
    {
        return [
            self::ALIGN_ITEMS_CENTER,
            self::ALIGN_ITEMS_FLEX_START,
            self::ALIGN_ITEMS_FLEX_END,
        ];
    }


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->setIfExists('layout', $data ?? [], null);
        $this->setIfExists('flex', $data ?? [], null);
        $this->setIfExists('contents', $data ?? [], null);
        $this->setIfExists('spacing', $data ?? [], null);
        $this->setIfExists('margin', $data ?? [], null);
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('offset_top', $data ?? [], null);
        $this->setIfExists('offset_bottom', $data ?? [], null);
        $this->setIfExists('offset_start', $data ?? [], null);
        $this->setIfExists('offset_end', $data ?? [], null);
        $this->setIfExists('background_color', $data ?? [], null);
        $this->setIfExists('border_color', $data ?? [], null);
        $this->setIfExists('border_width', $data ?? [], null);
        $this->setIfExists('corner_radius', $data ?? [], null);
        $this->setIfExists('width', $data ?? [], null);
        $this->setIfExists('max_width', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('max_height', $data ?? [], null);
        $this->setIfExists('padding_all', $data ?? [], null);
        $this->setIfExists('padding_top', $data ?? [], null);
        $this->setIfExists('padding_bottom', $data ?? [], null);
        $this->setIfExists('padding_start', $data ?? [], null);
        $this->setIfExists('padding_end', $data ?? [], null);
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('justify_content', $data ?? [], null);
        $this->setIfExists('align_items', $data ?? [], null);
        $this->setIfExists('background', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['layout'] === null) {
            $invalidProperties[] = "'layout' can't be null";
        }
        $allowedValues = $this->getLayoutAllowableValues();
        if (!is_null($this->container['layout']) && !in_array($this->container['layout'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'layout', must be one of '%s'",
                $this->container['layout'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['contents'] === null) {
            $invalidProperties[] = "'contents' can't be null";
        }
        $allowedValues = $this->getPositionAllowableValues();
        if (!is_null($this->container['position']) && !in_array($this->container['position'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'position', must be one of '%s'",
                $this->container['position'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getJustifyContentAllowableValues();
        if (!is_null($this->container['justify_content']) && !in_array($this->container['justify_content'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'justify_content', must be one of '%s'",
                $this->container['justify_content'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAlignItemsAllowableValues();
        if (!is_null($this->container['align_items']) && !in_array($this->container['align_items'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'align_items', must be one of '%s'",
                $this->container['align_items'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets layout
     *
     * @return string
     */
    public function getLayout()
    {
        return $this->container['layout'];
    }

    /**
     * Sets layout
     *
     * @param string $layout layout
     *
     * @return self
     */
    public function setLayout($layout)
    {
        if (is_null($layout)) {
            throw new \InvalidArgumentException('non-nullable layout cannot be null');
        }
        $allowedValues = $this->getLayoutAllowableValues();
        if (!in_array($layout, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'layout', must be one of '%s'",
                    $layout,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['layout'] = $layout;

        return $this;
    }

    /**
     * Gets flex
     *
     * @return int|null
     */
    public function getFlex()
    {
        return $this->container['flex'];
    }

    /**
     * Sets flex
     *
     * @param int|null $flex flex
     *
     * @return self
     */
    public function setFlex($flex)
    {
        if (is_null($flex)) {
            throw new \InvalidArgumentException('non-nullable flex cannot be null');
        }
        $this->container['flex'] = $flex;

        return $this;
    }

    /**
     * Gets contents
     *
     * @return \LClutch\LineApi\MessagingApi\Model\FlexComponent[]
     */
    public function getContents()
    {
        return $this->container['contents'];
    }

    /**
     * Sets contents
     *
     * @param \LClutch\LineApi\MessagingApi\Model\FlexComponent[] $contents contents
     *
     * @return self
     */
    public function setContents($contents)
    {
        if (is_null($contents)) {
            throw new \InvalidArgumentException('non-nullable contents cannot be null');
        }
        $this->container['contents'] = $contents;

        return $this;
    }

    /**
     * Gets spacing
     *
     * @return string|null
     */
    public function getSpacing()
    {
        return $this->container['spacing'];
    }

    /**
     * Sets spacing
     *
     * @param string|null $spacing spacing
     *
     * @return self
     */
    public function setSpacing($spacing)
    {
        if (is_null($spacing)) {
            throw new \InvalidArgumentException('non-nullable spacing cannot be null');
        }
        $this->container['spacing'] = $spacing;

        return $this;
    }

    /**
     * Gets margin
     *
     * @return string|null
     */
    public function getMargin()
    {
        return $this->container['margin'];
    }

    /**
     * Sets margin
     *
     * @param string|null $margin margin
     *
     * @return self
     */
    public function setMargin($margin)
    {
        if (is_null($margin)) {
            throw new \InvalidArgumentException('non-nullable margin cannot be null');
        }
        $this->container['margin'] = $margin;

        return $this;
    }

    /**
     * Gets position
     *
     * @return string|null
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param string|null $position position
     *
     * @return self
     */
    public function setPosition($position)
    {
        if (is_null($position)) {
            throw new \InvalidArgumentException('non-nullable position cannot be null');
        }
        $allowedValues = $this->getPositionAllowableValues();
        if (!in_array($position, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'position', must be one of '%s'",
                    $position,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets offset_top
     *
     * @return string|null
     */
    public function getOffsetTop()
    {
        return $this->container['offset_top'];
    }

    /**
     * Sets offset_top
     *
     * @param string|null $offset_top offset_top
     *
     * @return self
     */
    public function setOffsetTop($offset_top)
    {
        if (is_null($offset_top)) {
            throw new \InvalidArgumentException('non-nullable offset_top cannot be null');
        }
        $this->container['offset_top'] = $offset_top;

        return $this;
    }

    /**
     * Gets offset_bottom
     *
     * @return string|null
     */
    public function getOffsetBottom()
    {
        return $this->container['offset_bottom'];
    }

    /**
     * Sets offset_bottom
     *
     * @param string|null $offset_bottom offset_bottom
     *
     * @return self
     */
    public function setOffsetBottom($offset_bottom)
    {
        if (is_null($offset_bottom)) {
            throw new \InvalidArgumentException('non-nullable offset_bottom cannot be null');
        }
        $this->container['offset_bottom'] = $offset_bottom;

        return $this;
    }

    /**
     * Gets offset_start
     *
     * @return string|null
     */
    public function getOffsetStart()
    {
        return $this->container['offset_start'];
    }

    /**
     * Sets offset_start
     *
     * @param string|null $offset_start offset_start
     *
     * @return self
     */
    public function setOffsetStart($offset_start)
    {
        if (is_null($offset_start)) {
            throw new \InvalidArgumentException('non-nullable offset_start cannot be null');
        }
        $this->container['offset_start'] = $offset_start;

        return $this;
    }

    /**
     * Gets offset_end
     *
     * @return string|null
     */
    public function getOffsetEnd()
    {
        return $this->container['offset_end'];
    }

    /**
     * Sets offset_end
     *
     * @param string|null $offset_end offset_end
     *
     * @return self
     */
    public function setOffsetEnd($offset_end)
    {
        if (is_null($offset_end)) {
            throw new \InvalidArgumentException('non-nullable offset_end cannot be null');
        }
        $this->container['offset_end'] = $offset_end;

        return $this;
    }

    /**
     * Gets background_color
     *
     * @return string|null
     */
    public function getBackgroundColor()
    {
        return $this->container['background_color'];
    }

    /**
     * Sets background_color
     *
     * @param string|null $background_color background_color
     *
     * @return self
     */
    public function setBackgroundColor($background_color)
    {
        if (is_null($background_color)) {
            throw new \InvalidArgumentException('non-nullable background_color cannot be null');
        }
        $this->container['background_color'] = $background_color;

        return $this;
    }

    /**
     * Gets border_color
     *
     * @return string|null
     */
    public function getBorderColor()
    {
        return $this->container['border_color'];
    }

    /**
     * Sets border_color
     *
     * @param string|null $border_color border_color
     *
     * @return self
     */
    public function setBorderColor($border_color)
    {
        if (is_null($border_color)) {
            throw new \InvalidArgumentException('non-nullable border_color cannot be null');
        }
        $this->container['border_color'] = $border_color;

        return $this;
    }

    /**
     * Gets border_width
     *
     * @return string|null
     */
    public function getBorderWidth()
    {
        return $this->container['border_width'];
    }

    /**
     * Sets border_width
     *
     * @param string|null $border_width border_width
     *
     * @return self
     */
    public function setBorderWidth($border_width)
    {
        if (is_null($border_width)) {
            throw new \InvalidArgumentException('non-nullable border_width cannot be null');
        }
        $this->container['border_width'] = $border_width;

        return $this;
    }

    /**
     * Gets corner_radius
     *
     * @return string|null
     */
    public function getCornerRadius()
    {
        return $this->container['corner_radius'];
    }

    /**
     * Sets corner_radius
     *
     * @param string|null $corner_radius corner_radius
     *
     * @return self
     */
    public function setCornerRadius($corner_radius)
    {
        if (is_null($corner_radius)) {
            throw new \InvalidArgumentException('non-nullable corner_radius cannot be null');
        }
        $this->container['corner_radius'] = $corner_radius;

        return $this;
    }

    /**
     * Gets width
     *
     * @return string|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param string|null $width width
     *
     * @return self
     */
    public function setWidth($width)
    {
        if (is_null($width)) {
            throw new \InvalidArgumentException('non-nullable width cannot be null');
        }
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets max_width
     *
     * @return string|null
     */
    public function getMaxWidth()
    {
        return $this->container['max_width'];
    }

    /**
     * Sets max_width
     *
     * @param string|null $max_width max_width
     *
     * @return self
     */
    public function setMaxWidth($max_width)
    {
        if (is_null($max_width)) {
            throw new \InvalidArgumentException('non-nullable max_width cannot be null');
        }
        $this->container['max_width'] = $max_width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return string|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param string|null $height height
     *
     * @return self
     */
    public function setHeight($height)
    {
        if (is_null($height)) {
            throw new \InvalidArgumentException('non-nullable height cannot be null');
        }
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets max_height
     *
     * @return string|null
     */
    public function getMaxHeight()
    {
        return $this->container['max_height'];
    }

    /**
     * Sets max_height
     *
     * @param string|null $max_height max_height
     *
     * @return self
     */
    public function setMaxHeight($max_height)
    {
        if (is_null($max_height)) {
            throw new \InvalidArgumentException('non-nullable max_height cannot be null');
        }
        $this->container['max_height'] = $max_height;

        return $this;
    }

    /**
     * Gets padding_all
     *
     * @return string|null
     */
    public function getPaddingAll()
    {
        return $this->container['padding_all'];
    }

    /**
     * Sets padding_all
     *
     * @param string|null $padding_all padding_all
     *
     * @return self
     */
    public function setPaddingAll($padding_all)
    {
        if (is_null($padding_all)) {
            throw new \InvalidArgumentException('non-nullable padding_all cannot be null');
        }
        $this->container['padding_all'] = $padding_all;

        return $this;
    }

    /**
     * Gets padding_top
     *
     * @return string|null
     */
    public function getPaddingTop()
    {
        return $this->container['padding_top'];
    }

    /**
     * Sets padding_top
     *
     * @param string|null $padding_top padding_top
     *
     * @return self
     */
    public function setPaddingTop($padding_top)
    {
        if (is_null($padding_top)) {
            throw new \InvalidArgumentException('non-nullable padding_top cannot be null');
        }
        $this->container['padding_top'] = $padding_top;

        return $this;
    }

    /**
     * Gets padding_bottom
     *
     * @return string|null
     */
    public function getPaddingBottom()
    {
        return $this->container['padding_bottom'];
    }

    /**
     * Sets padding_bottom
     *
     * @param string|null $padding_bottom padding_bottom
     *
     * @return self
     */
    public function setPaddingBottom($padding_bottom)
    {
        if (is_null($padding_bottom)) {
            throw new \InvalidArgumentException('non-nullable padding_bottom cannot be null');
        }
        $this->container['padding_bottom'] = $padding_bottom;

        return $this;
    }

    /**
     * Gets padding_start
     *
     * @return string|null
     */
    public function getPaddingStart()
    {
        return $this->container['padding_start'];
    }

    /**
     * Sets padding_start
     *
     * @param string|null $padding_start padding_start
     *
     * @return self
     */
    public function setPaddingStart($padding_start)
    {
        if (is_null($padding_start)) {
            throw new \InvalidArgumentException('non-nullable padding_start cannot be null');
        }
        $this->container['padding_start'] = $padding_start;

        return $this;
    }

    /**
     * Gets padding_end
     *
     * @return string|null
     */
    public function getPaddingEnd()
    {
        return $this->container['padding_end'];
    }

    /**
     * Sets padding_end
     *
     * @param string|null $padding_end padding_end
     *
     * @return self
     */
    public function setPaddingEnd($padding_end)
    {
        if (is_null($padding_end)) {
            throw new \InvalidArgumentException('non-nullable padding_end cannot be null');
        }
        $this->container['padding_end'] = $padding_end;

        return $this;
    }

    /**
     * Gets action
     *
     * @return \LClutch\LineApi\MessagingApi\Model\Action|null
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param \LClutch\LineApi\MessagingApi\Model\Action|null $action action
     *
     * @return self
     */
    public function setAction($action)
    {
        if (is_null($action)) {
            throw new \InvalidArgumentException('non-nullable action cannot be null');
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets justify_content
     *
     * @return string|null
     */
    public function getJustifyContent()
    {
        return $this->container['justify_content'];
    }

    /**
     * Sets justify_content
     *
     * @param string|null $justify_content justify_content
     *
     * @return self
     */
    public function setJustifyContent($justify_content)
    {
        if (is_null($justify_content)) {
            throw new \InvalidArgumentException('non-nullable justify_content cannot be null');
        }
        $allowedValues = $this->getJustifyContentAllowableValues();
        if (!in_array($justify_content, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'justify_content', must be one of '%s'",
                    $justify_content,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['justify_content'] = $justify_content;

        return $this;
    }

    /**
     * Gets align_items
     *
     * @return string|null
     */
    public function getAlignItems()
    {
        return $this->container['align_items'];
    }

    /**
     * Sets align_items
     *
     * @param string|null $align_items align_items
     *
     * @return self
     */
    public function setAlignItems($align_items)
    {
        if (is_null($align_items)) {
            throw new \InvalidArgumentException('non-nullable align_items cannot be null');
        }
        $allowedValues = $this->getAlignItemsAllowableValues();
        if (!in_array($align_items, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'align_items', must be one of '%s'",
                    $align_items,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['align_items'] = $align_items;

        return $this;
    }

    /**
     * Gets background
     *
     * @return \LClutch\LineApi\MessagingApi\Model\FlexBoxBackground|null
     */
    public function getBackground()
    {
        return $this->container['background'];
    }

    /**
     * Sets background
     *
     * @param \LClutch\LineApi\MessagingApi\Model\FlexBoxBackground|null $background background
     *
     * @return self
     */
    public function setBackground($background)
    {
        if (is_null($background)) {
            throw new \InvalidArgumentException('non-nullable background cannot be null');
        }
        $this->container['background'] = $background;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


