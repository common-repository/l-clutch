<?php
/**
 * BotInfoResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  LClutch\LineApi\MessagingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace LClutch\LineApi\MessagingApi\Model;

use \ArrayAccess;
use \LClutch\LineApi\MessagingApi\ObjectSerializer;

/**
 * BotInfoResponse Class Doc Comment
 *
 * @category Class
 * @package  LClutch\LineApi\MessagingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BotInfoResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BotInfoResponse';

    /**
      * Array of subclass mappings. Used for (de)serialization
      */
    public static $subclasses = [];

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'user_id' => 'string',
        'basic_id' => 'string',
        'premium_id' => 'string',
        'display_name' => 'string',
        'picture_url' => 'string',
        'chat_mode' => 'string',
        'mark_as_read_mode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'user_id' => null,
        'basic_id' => null,
        'premium_id' => null,
        'display_name' => null,
        'picture_url' => 'uri',
        'chat_mode' => null,
        'mark_as_read_mode' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'user_id' => false,
		'basic_id' => false,
		'premium_id' => false,
		'display_name' => false,
		'picture_url' => false,
		'chat_mode' => false,
		'mark_as_read_mode' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user_id' => 'userId',
        'basic_id' => 'basicId',
        'premium_id' => 'premiumId',
        'display_name' => 'displayName',
        'picture_url' => 'pictureUrl',
        'chat_mode' => 'chatMode',
        'mark_as_read_mode' => 'markAsReadMode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user_id' => 'setUserId',
        'basic_id' => 'setBasicId',
        'premium_id' => 'setPremiumId',
        'display_name' => 'setDisplayName',
        'picture_url' => 'setPictureUrl',
        'chat_mode' => 'setChatMode',
        'mark_as_read_mode' => 'setMarkAsReadMode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user_id' => 'getUserId',
        'basic_id' => 'getBasicId',
        'premium_id' => 'getPremiumId',
        'display_name' => 'getDisplayName',
        'picture_url' => 'getPictureUrl',
        'chat_mode' => 'getChatMode',
        'mark_as_read_mode' => 'getMarkAsReadMode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CHAT_MODE_CHAT = 'chat';
    public const CHAT_MODE_BOT = 'bot';
    public const MARK_AS_READ_MODE_AUTO = 'auto';
    public const MARK_AS_READ_MODE_MANUAL = 'manual';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChatModeAllowableValues()
    {
        return [
            self::CHAT_MODE_CHAT,
            self::CHAT_MODE_BOT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMarkAsReadModeAllowableValues()
    {
        return [
            self::MARK_AS_READ_MODE_AUTO,
            self::MARK_AS_READ_MODE_MANUAL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('basic_id', $data ?? [], null);
        $this->setIfExists('premium_id', $data ?? [], null);
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('picture_url', $data ?? [], null);
        $this->setIfExists('chat_mode', $data ?? [], null);
        $this->setIfExists('mark_as_read_mode', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['user_id'] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        if ($this->container['basic_id'] === null) {
            $invalidProperties[] = "'basic_id' can't be null";
        }
        if ($this->container['display_name'] === null) {
            $invalidProperties[] = "'display_name' can't be null";
        }
        if ($this->container['chat_mode'] === null) {
            $invalidProperties[] = "'chat_mode' can't be null";
        }
        $allowedValues = $this->getChatModeAllowableValues();
        if (!is_null($this->container['chat_mode']) && !in_array($this->container['chat_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'chat_mode', must be one of '%s'",
                $this->container['chat_mode'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['mark_as_read_mode'] === null) {
            $invalidProperties[] = "'mark_as_read_mode' can't be null";
        }
        $allowedValues = $this->getMarkAsReadModeAllowableValues();
        if (!is_null($this->container['mark_as_read_mode']) && !in_array($this->container['mark_as_read_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mark_as_read_mode', must be one of '%s'",
                $this->container['mark_as_read_mode'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id Bot's user ID
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets basic_id
     *
     * @return string
     */
    public function getBasicId()
    {
        return $this->container['basic_id'];
    }

    /**
     * Sets basic_id
     *
     * @param string $basic_id Bot's basic ID
     *
     * @return self
     */
    public function setBasicId($basic_id)
    {
        if (is_null($basic_id)) {
            throw new \InvalidArgumentException('non-nullable basic_id cannot be null');
        }
        $this->container['basic_id'] = $basic_id;

        return $this;
    }

    /**
     * Gets premium_id
     *
     * @return string|null
     */
    public function getPremiumId()
    {
        return $this->container['premium_id'];
    }

    /**
     * Sets premium_id
     *
     * @param string|null $premium_id Bot's premium ID. Not included in the response if the premium ID isn't set.
     *
     * @return self
     */
    public function setPremiumId($premium_id)
    {
        if (is_null($premium_id)) {
            throw new \InvalidArgumentException('non-nullable premium_id cannot be null');
        }
        $this->container['premium_id'] = $premium_id;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name Bot's display name
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if (is_null($display_name)) {
            throw new \InvalidArgumentException('non-nullable display_name cannot be null');
        }
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets picture_url
     *
     * @return string|null
     */
    public function getPictureUrl()
    {
        return $this->container['picture_url'];
    }

    /**
     * Sets picture_url
     *
     * @param string|null $picture_url Profile image URL. `https` image URL. Not included in the response if the bot doesn't have a profile image.
     *
     * @return self
     */
    public function setPictureUrl($picture_url)
    {
        if (is_null($picture_url)) {
            throw new \InvalidArgumentException('non-nullable picture_url cannot be null');
        }
        $this->container['picture_url'] = $picture_url;

        return $this;
    }

    /**
     * Gets chat_mode
     *
     * @return string
     */
    public function getChatMode()
    {
        return $this->container['chat_mode'];
    }

    /**
     * Sets chat_mode
     *
     * @param string $chat_mode Chat settings set in the LINE Official Account Manager. One of:  `chat`: Chat is set to \"On\". `bot`: Chat is set to \"Off\".
     *
     * @return self
     */
    public function setChatMode($chat_mode)
    {
        if (is_null($chat_mode)) {
            throw new \InvalidArgumentException('non-nullable chat_mode cannot be null');
        }
        $allowedValues = $this->getChatModeAllowableValues();
        if (!in_array($chat_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'chat_mode', must be one of '%s'",
                    $chat_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['chat_mode'] = $chat_mode;

        return $this;
    }

    /**
     * Gets mark_as_read_mode
     *
     * @return string
     */
    public function getMarkAsReadMode()
    {
        return $this->container['mark_as_read_mode'];
    }

    /**
     * Sets mark_as_read_mode
     *
     * @param string $mark_as_read_mode Automatic read setting for messages. If the chat is set to \"Off\", auto is returned. If the chat is set to \"On\", manual is returned.  `auto`: Auto read setting is enabled. `manual`: Auto read setting is disabled.
     *
     * @return self
     */
    public function setMarkAsReadMode($mark_as_read_mode)
    {
        if (is_null($mark_as_read_mode)) {
            throw new \InvalidArgumentException('non-nullable mark_as_read_mode cannot be null');
        }
        $allowedValues = $this->getMarkAsReadModeAllowableValues();
        if (!in_array($mark_as_read_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mark_as_read_mode', must be one of '%s'",
                    $mark_as_read_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mark_as_read_mode'] = $mark_as_read_mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


