<?php
/**
 * NarrowcastProgressResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  LClutch\LineApi\MessagingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace LClutch\LineApi\MessagingApi\Model;

use \ArrayAccess;
use \LClutch\LineApi\MessagingApi\ObjectSerializer;

/**
 * NarrowcastProgressResponse Class Doc Comment
 *
 * @category Class
 * @package  LClutch\LineApi\MessagingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NarrowcastProgressResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NarrowcastProgressResponse';

    /**
      * Array of subclass mappings. Used for (de)serialization
      */
    public static $subclasses = [];

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'phase' => 'string',
        'success_count' => 'int',
        'failure_count' => 'int',
        'target_count' => 'int',
        'failed_description' => 'string',
        'error_code' => 'int',
        'accepted_time' => '\DateTime',
        'completed_time' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'phase' => null,
        'success_count' => 'int64',
        'failure_count' => 'int64',
        'target_count' => 'int64',
        'failed_description' => null,
        'error_code' => 'int64',
        'accepted_time' => 'date-time',
        'completed_time' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'phase' => false,
		'success_count' => false,
		'failure_count' => false,
		'target_count' => false,
		'failed_description' => false,
		'error_code' => false,
		'accepted_time' => false,
		'completed_time' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'phase' => 'phase',
        'success_count' => 'successCount',
        'failure_count' => 'failureCount',
        'target_count' => 'targetCount',
        'failed_description' => 'failedDescription',
        'error_code' => 'errorCode',
        'accepted_time' => 'acceptedTime',
        'completed_time' => 'completedTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'phase' => 'setPhase',
        'success_count' => 'setSuccessCount',
        'failure_count' => 'setFailureCount',
        'target_count' => 'setTargetCount',
        'failed_description' => 'setFailedDescription',
        'error_code' => 'setErrorCode',
        'accepted_time' => 'setAcceptedTime',
        'completed_time' => 'setCompletedTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'phase' => 'getPhase',
        'success_count' => 'getSuccessCount',
        'failure_count' => 'getFailureCount',
        'target_count' => 'getTargetCount',
        'failed_description' => 'getFailedDescription',
        'error_code' => 'getErrorCode',
        'accepted_time' => 'getAcceptedTime',
        'completed_time' => 'getCompletedTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PHASE_WAITING = 'waiting';
    public const PHASE_SENDING = 'sending';
    public const PHASE_SUCCEEDED = 'succeeded';
    public const PHASE_FAILED = 'failed';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPhaseAllowableValues()
    {
        return [
            self::PHASE_WAITING,
            self::PHASE_SENDING,
            self::PHASE_SUCCEEDED,
            self::PHASE_FAILED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('phase', $data ?? [], null);
        $this->setIfExists('success_count', $data ?? [], null);
        $this->setIfExists('failure_count', $data ?? [], null);
        $this->setIfExists('target_count', $data ?? [], null);
        $this->setIfExists('failed_description', $data ?? [], null);
        $this->setIfExists('error_code', $data ?? [], null);
        $this->setIfExists('accepted_time', $data ?? [], null);
        $this->setIfExists('completed_time', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['phase'] === null) {
            $invalidProperties[] = "'phase' can't be null";
        }
        $allowedValues = $this->getPhaseAllowableValues();
        if (!is_null($this->container['phase']) && !in_array($this->container['phase'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'phase', must be one of '%s'",
                $this->container['phase'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['accepted_time'] === null) {
            $invalidProperties[] = "'accepted_time' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets phase
     *
     * @return string
     */
    public function getPhase()
    {
        return $this->container['phase'];
    }

    /**
     * Sets phase
     *
     * @param string $phase The current status. One of:  `waiting`: Messages are not yet ready to be sent. They are currently being filtered or processed in some way. `sending`: Messages are currently being sent. `succeeded`: Messages were sent successfully. This may not mean the messages were successfully received. `failed`: Messages failed to be sent. Use the failedDescription property to find the cause of the failure.
     *
     * @return self
     */
    public function setPhase($phase)
    {
        if (is_null($phase)) {
            throw new \InvalidArgumentException('non-nullable phase cannot be null');
        }
        $allowedValues = $this->getPhaseAllowableValues();
        if (!in_array($phase, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'phase', must be one of '%s'",
                    $phase,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['phase'] = $phase;

        return $this;
    }

    /**
     * Gets success_count
     *
     * @return int|null
     */
    public function getSuccessCount()
    {
        return $this->container['success_count'];
    }

    /**
     * Sets success_count
     *
     * @param int|null $success_count The number of users who successfully received the message.
     *
     * @return self
     */
    public function setSuccessCount($success_count)
    {
        if (is_null($success_count)) {
            throw new \InvalidArgumentException('non-nullable success_count cannot be null');
        }
        $this->container['success_count'] = $success_count;

        return $this;
    }

    /**
     * Gets failure_count
     *
     * @return int|null
     */
    public function getFailureCount()
    {
        return $this->container['failure_count'];
    }

    /**
     * Sets failure_count
     *
     * @param int|null $failure_count The number of users who failed to send the message.
     *
     * @return self
     */
    public function setFailureCount($failure_count)
    {
        if (is_null($failure_count)) {
            throw new \InvalidArgumentException('non-nullable failure_count cannot be null');
        }
        $this->container['failure_count'] = $failure_count;

        return $this;
    }

    /**
     * Gets target_count
     *
     * @return int|null
     */
    public function getTargetCount()
    {
        return $this->container['target_count'];
    }

    /**
     * Sets target_count
     *
     * @param int|null $target_count The number of intended recipients of the message.
     *
     * @return self
     */
    public function setTargetCount($target_count)
    {
        if (is_null($target_count)) {
            throw new \InvalidArgumentException('non-nullable target_count cannot be null');
        }
        $this->container['target_count'] = $target_count;

        return $this;
    }

    /**
     * Gets failed_description
     *
     * @return string|null
     */
    public function getFailedDescription()
    {
        return $this->container['failed_description'];
    }

    /**
     * Sets failed_description
     *
     * @param string|null $failed_description The reason the message failed to be sent. This is only included with a `phase` property value of `failed`.
     *
     * @return self
     */
    public function setFailedDescription($failed_description)
    {
        if (is_null($failed_description)) {
            throw new \InvalidArgumentException('non-nullable failed_description cannot be null');
        }
        $this->container['failed_description'] = $failed_description;

        return $this;
    }

    /**
     * Gets error_code
     *
     * @return int|null
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param int|null $error_code Error summary. This is only included with a phase property value of failed. One of:  `1`: An internal error occurred. `2`: An error occurred because there weren't enough recipients. `3`: A conflict error of requests occurs because a request that has already been accepted is retried.
     *
     * @return self
     */
    public function setErrorCode($error_code)
    {
        if (is_null($error_code)) {
            throw new \InvalidArgumentException('non-nullable error_code cannot be null');
        }
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets accepted_time
     *
     * @return \DateTime
     */
    public function getAcceptedTime()
    {
        return $this->container['accepted_time'];
    }

    /**
     * Sets accepted_time
     *
     * @param \DateTime $accepted_time Narrowcast message request accepted time in milliseconds.  Format: ISO 8601 (e.g. 2020-12-03T10:15:30.121Z) Timezone: UTC
     *
     * @return self
     */
    public function setAcceptedTime($accepted_time)
    {
        if (is_null($accepted_time)) {
            throw new \InvalidArgumentException('non-nullable accepted_time cannot be null');
        }
        $this->container['accepted_time'] = $accepted_time;

        return $this;
    }

    /**
     * Gets completed_time
     *
     * @return \DateTime|null
     */
    public function getCompletedTime()
    {
        return $this->container['completed_time'];
    }

    /**
     * Sets completed_time
     *
     * @param \DateTime|null $completed_time Processing of narrowcast message request completion time in milliseconds. Returned when the phase property is succeeded or failed.  Format: ISO 8601 (e.g. 2020-12-03T10:15:30.121Z) Timezone: UTC
     *
     * @return self
     */
    public function setCompletedTime($completed_time)
    {
        if (is_null($completed_time)) {
            throw new \InvalidArgumentException('non-nullable completed_time cannot be null');
        }
        $this->container['completed_time'] = $completed_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


