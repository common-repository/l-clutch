/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** WithRequired type helpers */
type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };

export interface paths {
  "/setting/login-channel": {
    /**
     * チャネルのステータスを取得
     * @description チャネルのステータスを取得します。
     */
    get: {
      responses: {
        /** @description チャネルのステータス */
        200: {
          content: {
            "application/json": components["schemas"]["ChannelStatus"];
          };
        };
      };
    };
    /**
     * チャネルの設定を更新
     * @description チャネルの設定を更新します。
     */
    post: {
      /** @description チャネルの設定 */
      requestBody: {
        content: {
          "application/json": components["schemas"]["ChannelSetting"];
        };
      };
      responses: {
        /** @description チャネルのステータス */
        200: {
          content: {
            "application/json": components["schemas"]["ChannelStatus"];
          };
        };
        /** @description 不正なリクエスト */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/setting/login-channel/check-login-url": {
    /**
     * ログインURLの確認結果の取得
     * @description ログインURLにアクセスできるかどうかを取得します。
     */
    get: {
      responses: {
        /** @description ログインURLにアクセスできるかどうか */
        200: {
          content: {
            "application/json": components["schemas"]["CheckLoginUrl"];
          };
        };
      };
    };
    /**
     * ログインURLの確認
     * @description ログインURLにアクセスできるかどうかを確認します。
     */
    post: {
      responses: {
        /** @description ログインURLにアクセスできるかどうか */
        200: {
          content: {
            "application/json": components["schemas"]["CheckLoginUrl"];
          };
        };
      };
    };
  };
  "/setting/login-channel/linked-official-account": {
    /**
     * ログインチャネルとLINE公式アカウントのリンク状況を確認
     * @description ログインチャネルとLINE公式アカウントのリンク状況を確認します。
     */
    get: {
      responses: {
        /** @description リンク状況 */
        200: {
          content: {
            "application/json": components["schemas"]["LinkedOfficialAccount"];
          };
        };
      };
    };
  };
  "/setting/messaging-channel": {
    /**
     * チャネルのステータスを取得
     * @description チャネルのステータスを取得します。
     */
    get: {
      responses: {
        /** @description チャネルのステータス */
        200: {
          content: {
            "application/json": components["schemas"]["ChannelStatus"];
          };
        };
      };
    };
    /**
     * チャネルの設定を更新
     * @description チャネルの設定を更新します。
     */
    post: {
      /** @description チャネルの設定 */
      requestBody: {
        content: {
          "application/json": components["schemas"]["ChannelSetting"];
        };
      };
      responses: {
        /** @description チャネルのステータス */
        200: {
          content: {
            "application/json": components["schemas"]["ChannelStatus"];
          };
        };
        /** @description 不正なリクエスト */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/setting/messaging-channel/bot-info": {
    /**
     * ボット情報の取得
     * @description 保存されているボット情報を取得します。
     */
    get: {
      responses: {
        /** @description ボット情報 */
        200: {
          content: {
            "application/json": components["schemas"]["BotInfo"];
          };
        };
      };
    };
    /**
     * ボット情報の更新
     * @description Messaging APIからボット情報を取得し、更新します。
     */
    post: {
      responses: {
        /** @description ボット情報 */
        200: {
          content: {
            "application/json": components["schemas"]["BotInfo"];
          };
        };
      };
    };
  };
  "/setting/messaging-channel/webhook": {
    /**
     * Webhookのエンドポイントを取得
     * @description 保存されているWebhookのエンドポイントを取得します。
     */
    get: {
      responses: {
        /** @description Webhookのエンドポイント */
        200: {
          content: {
            "application/json": components["schemas"]["WebhookSetting"];
          };
        };
      };
    };
    /**
     * Webhookのエンドポイントを更新
     * @description Messaging APIから、Webhookのエンドポイントを取得し、データを更新します。
     */
    post: {
      responses: {
        /** @description Webhookのエンドポイント */
        200: {
          content: {
            "application/json": components["schemas"]["WebhookSetting"];
          };
        };
      };
    };
  };
  "~/wp/v2/users/{id}": {
    /**
     * ユーザー
     * @description ユーザーを取得します
     */
    get: {
      responses: {
        /** @description 成功 */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
      };
    };
  };
  "~/wp/v2/users": {
    /**
     * ユーザー一覧
     * @description ユーザー一覧を取得します。
     */
    get: {
      parameters: {
        query?: {
          page?: components["parameters"]["Page"];
          per_page?: components["parameters"]["PerPage"];
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            "X-WP-TotalPages": components["headers"]["TotalPages"];
            "X-WP-Total": components["headers"]["Total"];
          };
          content: {
            "application/json": components["schemas"]["User"][];
          };
        };
      };
    };
  };
  "/rich-menu": {
    /**
     * リッチメニューの一覧
     * @description リッチメニューの一覧を取得します。
     */
    get: {
      parameters: {
        query?: {
          page?: components["parameters"]["Page"];
          per_page?: components["parameters"]["PerPage"];
          status?: components["parameters"]["Status"];
        };
      };
      responses: {
        /** @description リッチメニューの一覧 */
        200: {
          headers: {
            "X-WP-TotalPages": components["headers"]["TotalPages"];
            "X-WP-Total": components["headers"]["Total"];
          };
          content: {
            "application/json": components["schemas"]["RichMenuResponse"][];
          };
        };
      };
    };
    /**
     * リッチメニューの作成
     * @description リッチメニューを作成します。
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["RichMenuRequest"];
        };
      };
      responses: {
        /** @description 作成したリッチメニューの情報 */
        200: {
          content: {
            "application/json": components["schemas"]["RichMenuResponse"];
          };
        };
      };
    };
  };
  "/rich-menu/default": {
    /**
     * デフォルトのリッチメニューのIDを取得
     * @description デフォルトのリッチメニューのIDを取得します。
     */
    get: {
      responses: {
        /** @description デフォルトのリッチメニューのIDオブジェクト */
        200: {
          content: {
            "application/json": components["schemas"]["IdObject"] | Record<string, never>;
          };
        };
      };
    };
    /**
     * デフォルトのリッチメニューのIDを更新
     * @description デフォルトのリッチメニューのIDを更新します。
     */
    post: {
      /** @description デフォルトのリッチメニューのID */
      requestBody: {
        content: {
          "application/json": components["schemas"]["IdObject"];
        };
      };
      responses: {
        /** @description デフォルトのリッチメニューのIDオブジェクト */
        200: {
          content: {
            "application/json": components["schemas"]["IdObject"];
          };
        };
        /** @description エラーメッセージ */
        400: {
          content: {
            "$ref": unknown;
          };
        };
      };
    };
  };
  "/rich-menu/{id}": {
    /**
     * リッチメニューを取得
     * @description リッチメニューを取得します。
     */
    get: {
      parameters: {
        path: {
          id: components["parameters"]["ID"];
        };
      };
      responses: {
        /** @description リッチメニュー */
        200: {
          content: {
            "application/json": components["schemas"]["RichMenuResponse"];
          };
        };
      };
    };
    /**
     * リッチメニューを更新
     * @description リッチメニューを更新します。
     */
    put: {
      parameters: {
        path: {
          id: components["parameters"]["ID"];
        };
      };
      /** @description 更新するリッチメニュー */
      requestBody: {
        content: {
          "application/json": components["schemas"]["RichMenuRequest"];
        };
      };
      responses: {
        /** @description 更新したリッチメニュー */
        200: {
          content: {
            "application/json": components["schemas"]["RichMenuResponse"];
          };
        };
      };
    };
    /**
     * リッチメニューを削除
     * @description リッチメニューを削除します。
     */
    delete: {
      parameters: {
        path: {
          id: components["parameters"]["ID"];
        };
      };
      responses: {
        /** @description 削除したリッチメニュー */
        200: {
          content: {
            "application/json": components["schemas"]["RichMenuResponse"];
          };
        };
      };
    };
  };
  "~/wp/v2/search": {
    /**
     * 検索
     * @description 検索
     */
    get: {
      parameters: {
        query: {
          page?: components["parameters"]["Page"];
          per_page?: components["parameters"]["PerPage"];
          /** @description 検索クエリ */
          search: string;
          /** @description 検索タイプ */
          type?: components["schemas"]["WpObjectType"];
          /** @description 検索サブタイプ */
          subtype?: components["schemas"]["WpObjectSubtype"] & "any";
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          content: {
            "application/json": components["schemas"]["SearchResponse"][];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ChannelStatus: external["wp-content/plugins/l-clutch/schemas/setting/channel-status.json"];
    ChannelSetting: external["wp-content/plugins/l-clutch/schemas/setting/channel-setting.json"];
    ErrorResponse: external["wp-content/plugins/l-clutch/schemas/api/error-response.json"];
    CheckLoginUrl: external["wp-content/plugins/l-clutch/schemas/setting/check-login-url.json"];
    LinkedOfficialAccount: external["wp-content/plugins/l-clutch/schemas/setting/linked-official-account.json"];
    BotInfo: external["wp-content/plugins/l-clutch/schemas/setting/bot-info.json"];
    WebhookSetting: external["wp-content/plugins/l-clutch/schemas/setting/webhook-setting.json"];
    User: external["wp-content/plugins/l-clutch/schemas/api/wp-user.json"];
    RichMenuResponse: external["wp-content/plugins/l-clutch/schemas/api/rich-menu-response.json"];
    RichMenuRequest: external["wp-content/plugins/l-clutch/schemas/api/rich-menu-request.json"];
    IdObject: external["wp-content/plugins/l-clutch/schemas/id-object.json"];
    WpObjectType: external["wp-content/plugins/l-clutch/schemas/api/wp-object-type.json"];
    WpObjectSubtype: external["wp-content/plugins/l-clutch/schemas/api/wp-object-sub-type.json"];
    SearchResponse: external["wp-content/plugins/l-clutch/schemas/api/wp-search-response.json"];
    Status: external["wp-content/plugins/l-clutch/schemas/status.json"];
    Image: external["wp-content/plugins/l-clutch/schemas/image.json"];
    LineAction: external["wp-content/plugins/l-clutch/schemas/line-action/line-action.json"];
    MessageAction: external["wp-content/plugins/l-clutch/schemas/line-action/message-action.json"];
    PostbackAction: external["wp-content/plugins/l-clutch/schemas/line-action/postback-action.json"];
    RichMenuSwitchAction: external["wp-content/plugins/l-clutch/schemas/line-action/rich-menu-switch-action.json"];
    UriAction: external["wp-content/plugins/l-clutch/schemas/line-action/uri-action.json"];
    RichMenuBounds: external["wp-content/plugins/l-clutch/schemas/rich-menu/rich-menu-bounds.json"];
  };
  responses: never;
  parameters: {
    /** @description ID */
    ID: number;
    /** @description ページ番号 */
    Page?: number;
    /** @description 1ページあたりのアイテム数 */
    PerPage?: number;
    /** @description ステータス */
    Status?: components["schemas"]["Status"];
  };
  requestBodies: never;
  headers: {
    /** @description 利用可能なページ数 */
    TotalPages: number;
    /** @description 合計アイテム数 */
    Total: number;
  };
  pathItems: never;
}

export type $defs = Record<string, never>;

export interface external {
  "wp-content/plugins/l-clutch/schemas/api/error-response.json": {
    /** @description エラーコード */
    code: string;
    /** @description エラーメッセージ */
    message?: string;
    /** @description エラーデータ */
    data?: Record<string, never>;
  };
  "wp-content/plugins/l-clutch/schemas/api/line-info.json": {
    /** @description ブロックされているか */
    is_blocked?: boolean;
    /**
     * Format: date-time
     * @description 最後にログインした日時
     */
    logged_in_at?: string;
  } & external["wp-content/plugins/l-clutch/schemas/line-account/line-account.json"];
  "wp-content/plugins/l-clutch/schemas/api/rich-menu-request.json": {
    status?: unknown;
    selected?: unknown;
    name?: unknown;
    chat_bar_text?: unknown;
    /** @description リッチメニューのサイズ */
    size?: external["wp-content/plugins/l-clutch/schemas/rich-menu/rich-menu-size.json"];
    /** @description リッチメニューエリアの配列 */
    areas?: external["wp-content/plugins/l-clutch/schemas/rich-menu/rich-menu-area.json"][];
    background?: external["wp-content/plugins/l-clutch/schemas/id-object.json"];
  } & external["wp-content/plugins/l-clutch/schemas/rich-menu/rich-menu-base.json"];
  "wp-content/plugins/l-clutch/schemas/api/rich-menu-response.json": {
    id?: unknown;
    status?: unknown;
    created_at?: unknown;
    updated_at?: unknown;
    rich_menu_id?: unknown;
    rich_menu_alias_id?: unknown;
    selected?: unknown;
    name?: unknown;
    chat_bar_text?: unknown;
    /** @description リッチメニューのサイズ */
    size?: external["wp-content/plugins/l-clutch/schemas/rich-menu/rich-menu-size.json"];
    /** @description リッチメニューエリアの配列 */
    areas?: external["wp-content/plugins/l-clutch/schemas/rich-menu/rich-menu-area.json"][];
    /** @description リッチメニューの背景画像 */
    background?: external["wp-content/plugins/l-clutch/schemas/image.json"];
  } & external["wp-content/plugins/l-clutch/schemas/api/row-response-base.json"] & external["wp-content/plugins/l-clutch/schemas/rich-menu/rich-menu-base.json"];
  "wp-content/plugins/l-clutch/schemas/api/row-response-base.json": WithRequired<external["wp-content/plugins/l-clutch/schemas/row-base.json"], "id" | "created_at" | "updated_at">;
  "wp-content/plugins/l-clutch/schemas/api/wp-object-sub-type.json": "post" | "page" | "category" | "post_tag";
  "wp-content/plugins/l-clutch/schemas/api/wp-object-type.json": "post" | "term" | "post_tag";
  "wp-content/plugins/l-clutch/schemas/api/wp-search-response.json": {
    /** @description ID */
    id?: number;
    /** @description タイトル */
    title?: string;
    /** @description URL */
    url?: string;
    type?: external["wp-content/plugins/l-clutch/schemas/api/wp-object-type.json"];
    subType?: external["wp-content/plugins/l-clutch/schemas/api/wp-object-sub-type.json"];
  };
  "wp-content/plugins/l-clutch/schemas/api/wp-user.json": {
    /** @description ユーザーID */
    id: number;
    /** @description アバター画像のURL */
    avatar_urls: {
      /** @description 24x24の画像 */
      24?: string;
      /** @description 48x48の画像 */
      48?: string;
      /** @description 96x96の画像 */
      96?: string;
    };
    line_info?: external["wp-content/plugins/l-clutch/schemas/api/line-info.json"];
  };
  "wp-content/plugins/l-clutch/schemas/id-object.json": {
    /** @description ID */
    id: number;
  };
  "wp-content/plugins/l-clutch/schemas/image.json": {
    /** @description ID */
    id: number;
    /** @description URL */
    url: string;
    /** @description サムネイルURL */
    thumbnail_url: string;
    /** @description 幅 */
    width: number;
    /** @description 高さ */
    height: number;
    /** @description ファイルサイズ */
    file_size: number;
  };
  "wp-content/plugins/l-clutch/schemas/line-account/line-account.json": {
    /** @description ユーザーID */
    user_id: string;
    /** @description 表示名 */
    display_name: string;
    /** @description プロフィール画像のURL */
    picture_url?: string;
    /** @description ステータスメッセージ */
    status_message?: string;
    /** @description 言語 */
    language?: string;
    /** @description メールアドレス */
    email?: string;
    /** @description 友達かどうか */
    friend_flag?: boolean;
  };
  "wp-content/plugins/l-clutch/schemas/line-action/line-action-base.json": {
    /** @description アクションの種類 */
    type: string;
    /** @description アクションのラベル */
    label?: string;
  };
  "wp-content/plugins/l-clutch/schemas/line-action/line-action.json": external["wp-content/plugins/l-clutch/schemas/line-action/message-action.json"] | external["wp-content/plugins/l-clutch/schemas/line-action/postback-action.json"] | external["wp-content/plugins/l-clutch/schemas/line-action/rich-menu-switch-action.json"] | external["wp-content/plugins/l-clutch/schemas/line-action/uri-action.json"];
  "wp-content/plugins/l-clutch/schemas/line-action/message-action.json": WithRequired<{
    /** @description メッセージのテキスト */
    text: string;
  } & external["wp-content/plugins/l-clutch/schemas/line-action/line-action-base.json"], "text">;
  "wp-content/plugins/l-clutch/schemas/line-action/postback-action.json": WithRequired<({
    /** @description アクションに付加するデータ */
    data: string;
    /** @description アクション実行時に送信されるテキスト */
    display_text?: string;
    /**
     * @description アクションに応じた、リッチメニューなどの表示方法
     * @enum {string}
     */
    input_option?: "closeRichMenu" | "openRichMenu" | "openKeyboard" | "openVoice";
    /** @description キーボードを開いたときに、入力欄にあらかじめ入力しておく文字列 */
    fill_in_text?: string;
  }) & external["wp-content/plugins/l-clutch/schemas/line-action/line-action-base.json"], "data">;
  "wp-content/plugins/l-clutch/schemas/line-action/rich-menu-switch-action.json": WithRequired<{
    /** @description アクションに付加するデータ */
    data?: string;
    /** @description 切り替えるリッチメニューのエイリアスID */
    rich_menu_alias_id: string;
  } & external["wp-content/plugins/l-clutch/schemas/line-action/line-action-base.json"], "rich_menu_alias_id">;
  "wp-content/plugins/l-clutch/schemas/line-action/uri-action.json": WithRequired<{
    /**
     * Format: uri
     * @description URI
     */
    uri: string;
    alt_uri?: {
      /**
       * Format: uri
       * @description デスクトップ用URI
       */
      desktop?: string;
    };
  } & external["wp-content/plugins/l-clutch/schemas/line-action/line-action-base.json"], "uri">;
  "wp-content/plugins/l-clutch/schemas/rich-menu/rich-menu-area.json": {
    bounds: external["wp-content/plugins/l-clutch/schemas/rich-menu/rich-menu-bounds.json"];
    action: external["wp-content/plugins/l-clutch/schemas/line-action/line-action.json"];
  };
  "wp-content/plugins/l-clutch/schemas/rich-menu/rich-menu-base.json": {
    /** @description リッチメニューID */
    rich_menu_id?: string;
    /** @description リッチメニューエイリアスID */
    rich_menu_alias_id?: string;
    /** @description リッチメニューをデフォルトで表示するかどうか */
    selected?: boolean;
    /** @description リッチメニューの名前 */
    name: string;
    /** @description チャットバーに表示するテキスト */
    chat_bar_text?: string;
  };
  "wp-content/plugins/l-clutch/schemas/rich-menu/rich-menu-bounds.json": {
    /** @description x座標 */
    x: number;
    /** @description y座標 */
    y: number;
    /** @description 幅 */
    width: number;
    /** @description 高さ */
    height: number;
  };
  "wp-content/plugins/l-clutch/schemas/rich-menu/rich-menu-size.json": {
    /** @description 幅 */
    width: number;
    /** @description 高さ */
    height: number;
  };
  "wp-content/plugins/l-clutch/schemas/row-base.json": {
    /** @description ID */
    id?: number;
    status: external["wp-content/plugins/l-clutch/schemas/status.json"];
    /** @description 作成日時 */
    created_at?: string;
    /** @description 更新日時 */
    updated_at?: string;
  };
  "wp-content/plugins/l-clutch/schemas/setting/bot-info.json": {
    /** @description ボットのベーシックID */
    basic_id?: string;
  };
  "wp-content/plugins/l-clutch/schemas/setting/channel-setting.json": {
    /** @description チャンネルID */
    channel_id: string;
    /** @description チャンネルシークレット */
    channel_secret: string;
  };
  "wp-content/plugins/l-clutch/schemas/setting/channel-status.json": {
    /** @description チャンネルID */
    channel_id?: string;
    /** @description チャンネルが有効かどうか */
    is_valid: boolean;
  };
  "wp-content/plugins/l-clutch/schemas/setting/check-login-url.json": {
    /** @description ログインURLにアクセスできるかどうか */
    can_access?: boolean;
  };
  "wp-content/plugins/l-clutch/schemas/setting/linked-official-account.json": {
    /** @description リンクされているか */
    is_linked?: boolean;
  };
  "wp-content/plugins/l-clutch/schemas/setting/webhook-setting.json": {
    /** @description Webhookのエンドポイント */
    endpoint?: string;
    /** @description URLが有効かどうか */
    is_valid?: boolean;
    /** @description Webhookの有効状態 */
    active?: boolean;
  };
  "wp-content/plugins/l-clutch/schemas/status.json": "draft" | "publish";
}

export type operations = Record<string, never>;
